plotOutput('plotR', height = "400px")
),
fluidRow(style = "padding-bottom: 100px;",
column(4, sliderInput('freq2', 'Frequency Range for Democratic:',
min = 10, max = 200, value = c(40,70))),
plotOutput('plotD', height = "400px")
)
),
server = function(input, output){
output$plotR <- renderPlot({
p.Rpbl <- ggplot(subset(wf.Rpbl, freq>min(input$freq1)&freq<max(input$freq1)), aes(reorder(word, -freq),freq))
p.Rpbl <- p.Rpbl + geom_bar(stat="identity",fill = "red3")
p.Rpbl <- p.Rpbl + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Rpbl <- p.Rpbl + xlab('Word') + ylab('Frequency')
p.Rpbl
})
output$plotD <- renderPlot({
p.Dmcr <- ggplot(subset(wf.Dmcr, freq>min(input$freq2)&freq<max(input$freq2)), aes(reorder(word, -freq),freq))
p.Dmcr <- p.Dmcr + geom_bar(stat="identity",fill = "blue4")
p.Dmcr <- p.Dmcr + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Dmcr <- p.Dmcr + xlab('Word') + ylab('Frequency')
p.Dmcr
})
},
options = list(height = 1100)
)
packages.used=c("SnowballC", "ggplot2", "rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr", "tm", "syuzhet",
"factoextra", "scales", "RColorBrewer", "RANN", "tm",
"topicmodels","NLP","openNLP","magrittr","wordcloud",
"tidytext","stringr","data.table","shiny")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(SnowballC)
library(dplyr)
library(rvest)
library(tibble)
library(qdap)
library(sentimentr)
library(gplots)
library(ggplot2)
library(syuzhet)
library(factoextra)
library(scales)
library(RColorBrewer)
library(RANN)
library(tm)
library(topicmodels)
library(NLP)
library(openNLP)
library(magrittr)
library(wordcloud)
library(tidytext)
library(stringr)
library(shiny)
library(data.table)
packages.used=c("SnowballC", "ggplot2", "rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr", "tm", "syuzhet",
"factoextra", "scales", "RColorBrewer", "RANN", "tm",
"topicmodels","NLP","openNLP","magrittr","wordcloud",
"tidytext","stringr","data.table","shiny")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(SnowballC)
library(dplyr)
library(rvest)
library(tibble)
library(qdap)
library(sentimentr)
library(gplots)
library(ggplot2)
library(syuzhet)
library(factoextra)
library(scales)
library(RColorBrewer)
library(RANN)
library(tm)
library(topicmodels)
library(NLP)
library(openNLP)
library(magrittr)
library(wordcloud)
library(tidytext)
library(stringr)
library(shiny)
library(data.table)
packages.used=c("SnowballC", "ggplot2", "rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr", "tm", "syuzhet",
"factoextra", "scales", "RColorBrewer", "RANN", "tm",
"topicmodels","NLP","openNLP","magrittr","wordcloud",
"tidytext","stringr","data.table","shiny")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(SnowballC)
library(dplyr)
library(rvest)
library(tibble)
library(qdap)
library(sentimentr)
library(gplots)
library(ggplot2)
library(syuzhet)
library(factoextra)
library(scales)
library(RColorBrewer)
library(RANN)
library(tm)
library(topicmodels)
library(NLP)
library(openNLP)
library(magrittr)
library(wordcloud)
library(tidytext)
library(stringr)
library(shiny)
library(data.table)
packages.used=c("SnowballC", "ggplot2", "rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr", "tm", "syuzhet",
"factoextra", "scales", "RColorBrewer", "RANN", "tm",
"topicmodels","NLP","openNLP","magrittr","wordcloud",
"tidytext","stringr","data.table","shiny")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(SnowballC)
library(dplyr)
library(rvest)
library(tibble)
library(qdap)
library(sentimentr)
library(gplots)
library(ggplot2)
library(syuzhet)
library(factoextra)
library(scales)
library(RColorBrewer)
library(RANN)
library(tm)
library(topicmodels)
library(NLP)
library(openNLP)
library(magrittr)
library(wordcloud)
library(tidytext)
library(stringr)
library(shiny)
library(data.table)
##Republican corpus
Rpbl.txt <- file.path("./data/InauguralSpeeches/Republican")
Rpbl <- Corpus(DirSource(Rpbl.txt))
Rpbl
##Democratic corpus
Dmcr.txt <- file.path("./data/InauguralSpeeches/Democratic")
Dmcr <- Corpus(DirSource(Dmcr.txt))
Dmcr
#pre-processing
Rpbl <- tm_map(Rpbl, removePunctuation)
Rpbl <- tm_map(Rpbl, removeNumbers)
Rpbl <- tm_map(Rpbl, tolower)
Rpbl <- tm_map(Rpbl, removeWords, stopwords("english"))
Rpbl <- tm_map(Rpbl, removeWords, c("upon"))
Rpbl <- tm_map(Rpbl, stemDocument)
Rpbl <- tm_map(Rpbl, stripWhitespace)
Rpbl <- tm_map(Rpbl, PlainTextDocument)
tdm.Rpbl <- TermDocumentMatrix(Rpbl)
tdm.tidyRpbl=tidy(tdm.Rpbl)
tdm.overallRpbl=summarise(group_by(tdm.tidyRpbl, term), sum(count))
#generate the wordcloud
wordcloud(tdm.overallRpbl$term, tdm.overallRpbl$`sum(count)`, max.words=70, random.order=FALSE, random.color=FALSE,rot.per=0, colors=brewer.pal(5,"Reds"))
#pre-processing
Dmcr <- tm_map(Dmcr, removePunctuation)
Dmcr <- tm_map(Dmcr, removeNumbers)
Dmcr <- tm_map(Dmcr, tolower)
Dmcr <- tm_map(Dmcr, removeWords, stopwords("english"))
Dmcr <- tm_map(Dmcr, removeWords, c("upon"))
Dmcr <- tm_map(Dmcr, stemDocument)
Dmcr <- tm_map(Dmcr, stripWhitespace)
Dmcr <- tm_map(Dmcr, PlainTextDocument)
tdm.Dmcr <- TermDocumentMatrix(Dmcr)
tdm.tidyDmcr=tidy(tdm.Dmcr)
tdm.overallDmcr=summarise(group_by(tdm.tidyDmcr, term), sum(count))
#generate the wordcloud
wordcloud(tdm.overallDmcr$term, tdm.overallDmcr$`sum(count)`, max.words=70, random.order=FALSE, random.color=FALSE,rot.per=0, colors=brewer.pal(5,"Blues"))
dtm.Rpbl <- DocumentTermMatrix(Rpbl)
freq.Rpbl <- colSums(as.matrix(dtm.Rpbl))
length(freq.Rpbl)
#sort the terms based on frequency in a descending order
ord.Rpbl <- order(freq.Rpbl, decreasing = TRUE)
#view top 30
freq.Rpbl[head(ord.Rpbl, n=30L)]
wf.Rpbl <- data.frame(word=names(freq.Rpbl), freq=freq.Rpbl)
p.Rpbl <- ggplot(subset(wf.Rpbl, freq>76), aes(reorder(word, -freq),freq))
p.Rpbl <- p.Rpbl + geom_bar(stat="identity",fill = "red3")
p.Rpbl <- p.Rpbl + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Rpbl <- p.Rpbl + xlab('Top 30 words') + ylab('Frequency')
p.Rpbl
dtm.Dmcr <- DocumentTermMatrix(Dmcr)
freq.Dmcr <- colSums(as.matrix(dtm.Dmcr))
length(freq.Dmcr)
#sort the terms based on frequency in a descending order
ord.Dmcr <- order(freq.Dmcr, decreasing = TRUE)
#view top 30
freq.Dmcr[head(ord.Dmcr, n=30L)]
wf.Dmcr <- data.frame(word=names(freq.Dmcr), freq=freq.Dmcr)
p.Dmcr <- ggplot(subset(wf.Dmcr, freq>55), aes(reorder(word, -freq),freq))
p.Dmcr <- p.Dmcr + geom_bar(stat="identity",fill = "blue4")
p.Dmcr <- p.Dmcr + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Dmcr <- p.Dmcr + xlab('Top 30 words') + ylab('Frequency')
p.Dmcr
shinyApp(
ui = fluidPage(
titlePanel("Select Frequency Ranges for Parties"),
fluidRow(style = "padding-bottom: 100px;",
column(4, sliderInput('freq1', 'Frequency Range for Republican:',
min = 10, max = 200, value = c(50,100))),
plotOutput('plotR', height = "400px")
),
fluidRow(style = "padding-bottom: 100px;",
column(4, sliderInput('freq2', 'Frequency Range for Democratic:',
min = 10, max = 200, value = c(40,70))),
plotOutput('plotD', height = "400px")
)
),
server = function(input, output){
output$plotR <- renderPlot({
p.Rpbl <- ggplot(subset(wf.Rpbl, freq>min(input$freq1)&freq<max(input$freq1)), aes(reorder(word, -freq),freq))
p.Rpbl <- p.Rpbl + geom_bar(stat="identity",fill = "red3")
p.Rpbl <- p.Rpbl + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Rpbl <- p.Rpbl + xlab('Word') + ylab('Frequency')
p.Rpbl
})
output$plotD <- renderPlot({
p.Dmcr <- ggplot(subset(wf.Dmcr, freq>min(input$freq2)&freq<max(input$freq2)), aes(reorder(word, -freq),freq))
p.Dmcr <- p.Dmcr + geom_bar(stat="identity",fill = "blue4")
p.Dmcr <- p.Dmcr + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Dmcr <- p.Dmcr + xlab('Word') + ylab('Frequency')
p.Dmcr
})
},
options = list(height = 1100)
)
shinyApp(
ui = fluidPage(
titlePanel("Select Frequency Ranges for Parties"),
fluidRow(style = "padding-bottom: 100px;",
column(4, sliderInput('freq1', 'Frequency Range for Republican:',
min = 10, max = 200, value = c(50,100))),
plotOutput('plotR', height = "400px")
),
fluidRow(style = "padding-bottom: 100px;",
column(4, sliderInput('freq2', 'Frequency Range for Democratic:',
min = 10, max = 200, value = c(40,70))),
plotOutput('plotD', height = "400px")
)
),
server = function(input, output){
output$plotR <- renderPlot({
p.Rpbl <- ggplot(subset(wf.Rpbl, freq>min(input$freq1)&freq<max(input$freq1)), aes(reorder(word, -freq),freq))
p.Rpbl <- p.Rpbl + geom_bar(stat="identity",fill = "red3")
p.Rpbl <- p.Rpbl + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Rpbl <- p.Rpbl + xlab('Word') + ylab('Frequency')
p.Rpbl
})
output$plotD <- renderPlot({
p.Dmcr <- ggplot(subset(wf.Dmcr, freq>min(input$freq2)&freq<max(input$freq2)), aes(reorder(word, -freq),freq))
p.Dmcr <- p.Dmcr + geom_bar(stat="identity",fill = "blue4")
p.Dmcr <- p.Dmcr + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Dmcr <- p.Dmcr + xlab('Word') + ylab('Frequency')
p.Dmcr
})
},
options = list(height = 1100)
)
packages.used=c("SnowballC", "ggplot2", "rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr", "tm", "syuzhet",
"factoextra", "scales", "RColorBrewer", "RANN", "tm",
"topicmodels","NLP","openNLP","magrittr","wordcloud",
"tidytext","stringr","data.table","shiny")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(SnowballC)
library(dplyr)
library(rvest)
library(tibble)
library(qdap)
library(sentimentr)
library(gplots)
library(ggplot2)
library(syuzhet)
library(factoextra)
library(scales)
library(RColorBrewer)
library(RANN)
library(tm)
library(topicmodels)
library(NLP)
library(openNLP)
library(magrittr)
library(wordcloud)
library(tidytext)
library(stringr)
library(shiny)
library(data.table)
packages.used=c("SnowballC", "ggplot2", "rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr", "tm", "syuzhet",
"factoextra", "scales", "RColorBrewer", "RANN", "tm",
"topicmodels","NLP","openNLP","magrittr","wordcloud",
"tidytext","stringr","data.table","shiny")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(SnowballC)
library(dplyr)
library(rvest)
library(tibble)
library(qdap)
library(sentimentr)
library(gplots)
library(ggplot2)
library(syuzhet)
library(factoextra)
library(scales)
library(RColorBrewer)
library(RANN)
library(tm)
library(topicmodels)
library(NLP)
library(openNLP)
library(magrittr)
library(wordcloud)
library(tidytext)
library(stringr)
library(shiny)
library(data.table)
packages.used=c("SnowballC", "ggplot2", "rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr", "tm", "syuzhet",
"factoextra", "scales", "RColorBrewer", "RANN", "tm",
"topicmodels","NLP","openNLP","magrittr","wordcloud",
"tidytext","stringr","data.table","shiny")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(SnowballC)
library(dplyr)
library(rvest)
library(tibble)
library(qdap)
library(sentimentr)
library(gplots)
library(ggplot2)
library(syuzhet)
library(factoextra)
library(scales)
library(RColorBrewer)
library(RANN)
library(tm)
library(topicmodels)
library(NLP)
library(openNLP)
library(magrittr)
library(wordcloud)
library(tidytext)
library(stringr)
library(shiny)
library(data.table)
print(R.version)
##Republican corpus
Rpbl.txt <- file.path("./data/InauguralSpeeches/Republican")
Rpbl <- Corpus(DirSource(Rpbl.txt))
Rpbl
##Democratic corpus
Dmcr.txt <- file.path("./data/InauguralSpeeches/Democratic")
Dmcr <- Corpus(DirSource(Dmcr.txt))
Dmcr
#pre-processing
Rpbl <- tm_map(Rpbl, removePunctuation)
Rpbl <- tm_map(Rpbl, removeNumbers)
Rpbl <- tm_map(Rpbl, tolower)
Rpbl <- tm_map(Rpbl, removeWords, stopwords("english"))
Rpbl <- tm_map(Rpbl, removeWords, c("upon"))
Rpbl <- tm_map(Rpbl, stemDocument)
Rpbl <- tm_map(Rpbl, stripWhitespace)
Rpbl <- tm_map(Rpbl, PlainTextDocument)
tdm.Rpbl <- TermDocumentMatrix(Rpbl)
tdm.tidyRpbl=tidy(tdm.Rpbl)
tdm.overallRpbl=summarise(group_by(tdm.tidyRpbl, term), sum(count))
#generate the wordcloud
wordcloud(tdm.overallRpbl$term, tdm.overallRpbl$`sum(count)`, max.words=70, random.order=FALSE, random.color=FALSE,rot.per=0, colors=brewer.pal(5,"Reds"))
#pre-processing
Dmcr <- tm_map(Dmcr, removePunctuation)
Dmcr <- tm_map(Dmcr, removeNumbers)
Dmcr <- tm_map(Dmcr, tolower)
Dmcr <- tm_map(Dmcr, removeWords, stopwords("english"))
Dmcr <- tm_map(Dmcr, removeWords, c("upon"))
Dmcr <- tm_map(Dmcr, stemDocument)
Dmcr <- tm_map(Dmcr, stripWhitespace)
Dmcr <- tm_map(Dmcr, PlainTextDocument)
tdm.Dmcr <- TermDocumentMatrix(Dmcr)
tdm.tidyDmcr=tidy(tdm.Dmcr)
tdm.overallDmcr=summarise(group_by(tdm.tidyDmcr, term), sum(count))
#generate the wordcloud
wordcloud(tdm.overallDmcr$term, tdm.overallDmcr$`sum(count)`, max.words=70, random.order=FALSE, random.color=FALSE,rot.per=0, colors=brewer.pal(5,"Blues"))
dtm.Rpbl <- DocumentTermMatrix(Rpbl)
freq.Rpbl <- colSums(as.matrix(dtm.Rpbl))
length(freq.Rpbl)
#sort the terms based on frequency in a descending order
ord.Rpbl <- order(freq.Rpbl, decreasing = TRUE)
#view top 30
freq.Rpbl[head(ord.Rpbl, n=30L)]
wf.Rpbl <- data.frame(word=names(freq.Rpbl), freq=freq.Rpbl)
p.Rpbl <- ggplot(subset(wf.Rpbl, freq>76), aes(reorder(word, -freq),freq))
p.Rpbl <- p.Rpbl + geom_bar(stat="identity",fill = "red3")
p.Rpbl <- p.Rpbl + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Rpbl <- p.Rpbl + xlab('Top 30 words') + ylab('Frequency')
p.Rpbl
dtm.Dmcr <- DocumentTermMatrix(Dmcr)
freq.Dmcr <- colSums(as.matrix(dtm.Dmcr))
length(freq.Dmcr)
#sort the terms based on frequency in a descending order
ord.Dmcr <- order(freq.Dmcr, decreasing = TRUE)
#view top 30
freq.Dmcr[head(ord.Dmcr, n=30L)]
wf.Dmcr <- data.frame(word=names(freq.Dmcr), freq=freq.Dmcr)
p.Dmcr <- ggplot(subset(wf.Dmcr, freq>55), aes(reorder(word, -freq),freq))
p.Dmcr <- p.Dmcr + geom_bar(stat="identity",fill = "blue4")
p.Dmcr <- p.Dmcr + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Dmcr <- p.Dmcr + xlab('Top 30 words') + ylab('Frequency')
p.Dmcr
shinyApp(
ui = fluidPage(
titlePanel("Select Frequency Ranges for Parties"),
fluidRow(style = "padding-bottom: 100px;",
column(4, sliderInput('freq1', 'Frequency Range for Republican:',
min = 30, max = 200, value = c(50,100))),
plotOutput('plotR', height = "400px")
),
fluidRow(style = "padding-bottom: 100px;",
column(4, sliderInput('freq2', 'Frequency Range for Democratic:',
min = 30, max = 200, value = c(40,70))),
plotOutput('plotD', height = "400px")
)
),
server = function(input, output){
output$plotR <- renderPlot({
p.Rpbl <- ggplot(subset(wf.Rpbl, freq>min(input$freq1)&freq<max(input$freq1)), aes(reorder(word, -freq),freq))
p.Rpbl <- p.Rpbl + geom_bar(stat="identity",fill = "red3")
p.Rpbl <- p.Rpbl + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Rpbl <- p.Rpbl + xlab('Word') + ylab('Frequency')
p.Rpbl
})
output$plotD <- renderPlot({
p.Dmcr <- ggplot(subset(wf.Dmcr, freq>min(input$freq2)&freq<max(input$freq2)), aes(reorder(word, -freq),freq))
p.Dmcr <- p.Dmcr + geom_bar(stat="identity",fill = "blue4")
p.Dmcr <- p.Dmcr + theme(axis.text.x=element_text(angle=45, hjust=1))
p.Dmcr <- p.Dmcr + xlab('Word') + ylab('Frequency')
p.Dmcr
})
},
options = list(height = 1100)
)
folder.pathA="./data/InauguralSpeeches/All"
speeches.A=list.files(path = folder.pathA, pattern = "*.txt")
ff.A<-Corpus(DirSource(folder.pathA))
folder.pathA="./data/InauguralSpeeches/All"
speeches.A=list.files(path = folder.pathA, pattern = "*.txt")
ff.A<-Corpus(DirSource(folder.pathA))
